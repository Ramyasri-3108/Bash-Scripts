# -*- coding: utf-8 -*-
"""wordcloud_final_project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1E5C2ShQgSBubSfkYhhYPVSXhSwA4QLI3
"""

def text_preprocess():
    fd=open("sample.txt","r")
    global all_words
    all_words=[]
    for line in fd:         
        line=line.strip(" ")    #Remove leading and trailing spaces
        line=line.strip("\n")   # Remove \n at the end of line
        words=line.split(" ")   # split lines
        all_words=all_words+words # add words of each line to all_words list
        
    # Identify words containing punctuation
    punctuation_words=[]
    for w in all_words:
        if(not w.isalpha()):  # if words does not contain alphabets
            punctuation_words.append(w)  # add to punctuation_words list
        
    # Remove words with punctuation from all_words list
    for element in punctuation_words:
        all_words.remove(element)
        
    # Remove the punctuation in words containing punctuation and add to all_words list
    p='''!@#$%^&*()_-':;/?\,.' '""'''
    no_punct_words=[]
    for w1 in punctuation_words:
        nw=""
        for ch in w1:
            if(ch not in p):
                nw=nw+ch
        no_punct_words.append(nw)
        
    # Combine this list of words without punctuation to all_words list 
    all_words=all_words+no_punct_words
    return all_words

# Count frequecy of words removing uninteresting words from set s
s={"a","an","the","to","for","if","of","at","be"}
def count_freq(all_words,s):
  mydic={}
  for w in all_words:
    if(w not in s):
      if w not in mydic:
        mydic[w]=1
        mydic[w]+=1
  return(mydic) 

all_words=text_preprocess()
word_freq=count_freq(all_words,s)
#print(word_freq)
import wordcloud
import matplotlib.pyplot as plt
cloud = wordcloud.WordCloud()
cloud.generate_from_frequencies(word_freq)
#cloud.to_file("mywordcloud.jpg")  # to generate wordcloud as a file 
myimg=cloud.generate_from_frequencies(word_freq)
plt.imshow(myimg, interpolation='nearest')
plt.axis("off")
plt.imshow(myimg)

